function clbregs=runPOCcalibPipe(ivs,regs,gtDistnaceMM)
supportedPOCres=[320 240;640 480;1280 960];
ind=minind(sum(abs(bsxfun(@minus,supportedPOCres,double(max(ivs.xy,[],2)')./[4 1])),2));
curRes = supportedPOCres(ind,:);

dsf = curRes(1)/160;
regs.CLBR.fastChDelayNsec = 0;
regs.CLBR.slowChDelayNsec = 0;
regs.CLBR.referenceOffset= 0;
%% reference offset calibration
regsRO=regs;
regsRO.RAST.imgHsize=160;
regsRO.RAST.imgVsize=120;
regsRO.FILT.bypass=1;
ivsRO = ivs;
ivsRO.xy = ivsRO.xy/dsf;
po=Pipe.pipeIVLpi(ivsRO,regsRO);
zimg =double(po.zImgRAW)/double(regs.DEST.zNorm);
referenceOffset = Utils.rmm2dtnsec(mean(zimg((po.cImg==max(po.cImg(:)))))-gtDistnaceMM);
regs.CLBR.referenceOffset = single(referenceOffset);
fprintf('ReferenceOffset = %f\n',regs.CLBR.referenceOffset);
%%
po=Pipe.pipeIVLpi(ivs,regs);
cThr = max(po.cImg(:))*0.5;

clf;
dispImg = double(po.zImgRAW)/double(regs.DEST.zNorm);
dispImg(po.cImg<cThr)=nan;
a=imagescNAN(dispImg,prctile(dispImg(:),[10 90]));axis image
h = imrect(get(a,'Parent'));
setPositionConstraintFcn(h,makeConstrainToRectFcn('imrect',[1 size(po.rImg,2)],[1 size(po.rImg,1)]));
p = wait(h);
close(get(get(a,'Parent'),'parent'));
drawnow;
%
p=round(p);
ivsMS = ivs;
%move 00
ivsMS.xy=max(-1,bsxfun(@minus,ivsMS.xy,int16([p(1)*4;p(2)])));
regsMS = regs;
regsMS.FILT.bypass=1;
regsMS.RAST.imgHsize = p(3);
regsMS.RAST.imgVsize = p(4);

[fd,sd] = Calibration.aux.mSyncerPipe(ivsMS,regsMS,regs.CLBR.fastChDelayNsec);
fprintf('fastChDelayNsec = %f\n',fd);
fprintf('slowChDelayNsec = %f\n',sd);
regs.CLBR.fastChDelayNsec = int32(fd);
regs.CLBR.slowChDelayNsec = int32(sd);
po =  Pipe.pipeIVLpi(ivs,regs);
Pipe.displayPipeOutData(po,'delay offsets results');
%% FOV
[xFOV,yFOV,xKeystone,yKeystone] = Calibration.aux.findOpticalSetupParam(po.rImg);
regs.CLBR.xFOV = single(xFOV);
regs.CLBR.yFOV = single(yFOV);
regs.CLBR.xKeystone = single(xKeystone);
regs.CLBR.yKeystone = single(yKeystone);
%%
clbregs = regs.CLBR;
end