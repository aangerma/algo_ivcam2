/*****************************************************************************

                                char_traits

    C++ compatible header file for use in compiling SystemC.

    $Id: char_traits,v 1.3 2005-06-15 22:55:13 deg Exp $

*****************************************************************************/

#ifndef _CHAR_TRAITS
#define _CHAR_TRAITS

#include <cstddef>          /* for size_t */
#include <streamdefs>       /* for streamoff */

namespace std {

#ifndef _STD_MBSTATE_T
#define _STD_MBSTATE_T
    typedef struct { int arr[6]; } mbstate_t;
#endif  /* _STD_MBSTATE_T */

    // break circularity as suggested in 27.2:

    template<class stateT> class fpos;
    typedef fpos<mbstate_t> streampos;
    typedef fpos<mbstate_t> wstreampos;

    // 21.1, character traits: 
    template<class charT> struct char_traits; 

    template<> struct char_traits<char> { 
        typedef char char_type; 
        typedef int int_type; 
        typedef streamoff off_type; 
        typedef streampos pos_type; 
        typedef mbstate_t state_type; 

        static void assign(char_type& c1, const char_type& c2); 
        static bool eq(const char_type& c1, const char_type& c2); 
        static bool lt(const char_type& c1, const char_type& c2);
        static int compare(const char_type* s1, const char_type* s2, size_t n);
        static size_t length(const char_type* s); 
        static const char_type* find(const char_type* s, size_t n, 
                                     const char_type& a); 
        static char_type* move(char_type* s1, const char_type* s2, size_t n); 
        static char_type* copy(char_type* s1, const char_type* s2, size_t n); 
        static char_type* assign(char_type* s, size_t n, char_type a); 
        static int_type not_eof(const int_type& c); 
        static char_type to_char_type(const int_type& c); 
        static int_type to_int_type(const char_type& c); 
        static bool eq_int_type(const int_type& c1, const int_type& c2); 
        static int_type eof(); 
    };

    template<> struct char_traits<wchar_t> { 
        typedef wchar_t char_type; 
        typedef long int_type; 
        typedef streamoff off_type; 
        typedef wstreampos pos_type; 
        typedef mbstate_t state_type; 

        static void assign(char_type& c1, const char_type& c2); 
        static bool eq(const char_type& c1, const char_type& c2); 
        static bool lt(const char_type& c1, const char_type& c2); 
        static int compare(const char_type* s1, const char_type* s2, size_t n);
        static size_t length(const char_type* s); 
        static const char_type* find(const char_type* s, size_t n, 
                                     const char_type& a); 
        static char_type* move(char_type* s1, const char_type* s2, size_t n); 
        static char_type* copy(char_type* s1, const char_type* s2, size_t n); 
        static char_type* assign(char_type* s, size_t n, char_type a);
        static int_type not_eof(const int_type& c); 
        static char_type to_char_type(const int_type& c); 
        static int_type to_int_type(const char_type& c); 
        static bool eq_int_type(const int_type& c1, const int_type& c2); 
        static int_type eof(); 
    };

}   /* namespace std */

#endif /* _CHAR_TRAITS */
