/*****************************************************************************

                                    strstream

    C++ compatible header file for use in compiling SystemC.

    $Id: strstream,v 1.3 2005-06-29 19:12:44 deg Exp $

*****************************************************************************/

#ifndef _STRSTREAM
#define _STRSTREAM

#include <basic_iostream>   /* for basic_iostream */
#include <streambuf>        /* for basic_streambuf */

#ifndef EOF
#define EOF (-1)
#endif

namespace std { 

    class strstreambuf : public basic_streambuf<char> { 
    public: 
        explicit strstreambuf(streamsize alsize_arg = 0); 
        strstreambuf(void* (* palloc_arg)(size_t), void (* pfree_arg)(void*)); 
        strstreambuf(char* gnext_arg, streamsize n, char* pbeg_arg = 0); 
        strstreambuf(const char* gnext_arg, streamsize n); 

        strstreambuf(signed char* gnext_arg, streamsize n, 
                     signed char* pbeg_arg = 0); 
        strstreambuf(const signed char* gnext_arg, streamsize n); 
        strstreambuf(unsigned char* gnext_arg, streamsize n, 
                     unsigned char* pbeg_arg = 0); 
        strstreambuf(const unsigned char* gnext_arg, streamsize n); 

        virtual ~strstreambuf();

        void freeze(bool freezefl = true); 
        char* str(); 
        int pcount(); 

    protected: 
        virtual int_type overflow (int_type c = EOF); 
        virtual int_type pbackfail(int_type c = EOF); 
        virtual int_type underflow(); 
        virtual pos_type seekoff(off_type off, ios_base::seekdir way, 
                                 ios_base::openmode which = 
                                 ios_base::in | ios_base::out); 
        virtual pos_type seekpos(pos_type sp, ios_base::openmode which = 
                                 ios_base::in | ios_base::out); 
        virtual basic_streambuf<char>* setbuf(char* s, streamsize n); 

    }; 

    class istrstream : public basic_istream<char> { 
    public: 
        explicit istrstream(const char* s); 
        explicit istrstream(char* s); 
        istrstream(const char* s, streamsize n); 
        istrstream(char* s, streamsize n); 
        virtual ~istrstream(); 
        strstreambuf* rdbuf() const; 
        char *str(); 
    }; 

    class ostrstream : public basic_ostream<char> { 
    public: 
        ostrstream(); 
        ostrstream(char* s, int n, ios_base::openmode mode = ios_base::out); 
        virtual ~ostrstream(); 
        strstreambuf* rdbuf() const; 
        void freeze(bool freezefl = true); 
        char* str(); 
        int pcount() const; 
    };

    class strstream : public basic_iostream<char> { 
    public: 
        // Types 
        typedef char char_type; 
        typedef char_traits<char>::int_type int_type; 
        typedef char_traits<char>::pos_type pos_type; 
        typedef char_traits<char>::off_type off_type; 

        // constructors/destructor 
        strstream(); 
        strstream(char* s, int n, 
                  ios_base::openmode mode = ios_base::in|ios_base::out); 
        virtual ~strstream(); 

        // Members: 
        strstreambuf* rdbuf() const; 
        void freeze(bool freezefl = true); 
        int pcount() const; 
        char* str(); 
    }; 

}   /* namespace std */

#endif /* _STRSTREAM */
