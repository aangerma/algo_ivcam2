/*****************************************************************************

                                    sstream

    C++ compatible header file for use in compiling SystemC.

    Essentially copied from the Standard.

    $Id: sstream,v 1.4 2005-10-18 18:27:25 deg Exp $

*****************************************************************************/

#ifndef _SSTREAM
#define _SSTREAM

#include <allocator>        /* for allocator */
#include <char_traits>      /* for char_traits */
#include <iosfwd>           /* for template default arguments */
#include <ios>
#include <ios_base>
#include <string>

namespace std {

    template <class charT, class traits, class Allocator>
    class basic_stringbuf : public basic_streambuf<charT, traits> {
    public:
        typedef charT                     char_type;
        typedef typename traits::int_type int_type;
        typedef typename traits::pos_type pos_type;
        typedef typename traits::off_type off_type;
        typedef traits                    traits_type;
        // constructors:
        explicit basic_stringbuf(ios_base::openmode which
                                 = ios_base::in | ios_base::out);
        explicit basic_stringbuf(
            const basic_string<charT, traits, Allocator>& str,
            ios_base::openmode which = ios_base::in | ios_base::out);
        // get and set:
        basic_string<charT, traits, Allocator> str() const;
        void str(const basic_string<charT, traits, Allocator>& s);
    protected:
        // overriden virtual functions:
        virtual int_type underflow();
        virtual int_type pbackfail(int_type c = traits::eof());
        virtual int_type overflow(int_type c = traits::eof());
        virtual basic_streambuf<charT, traits>* setbuf(charT*, streamsize);
        virtual pos_type seekoff(off_type off, ios_base::seekdir way,
                                 ios_base::openmode which
                                 = ios_base::in | ios_base::out);
        virtual pos_type seekpos(pos_type sp,
                                 ios_base::openmode which
                                 = ios_base::in | ios_base::out);
    private:
    };

    typedef basic_stringbuf<char>    stringbuf;
    typedef basic_stringbuf<wchar_t> wstringbuf;

    template <class charT, class traits, class Allocator>
    class basic_istringstream : public basic_istream<charT, traits> {
    public:
        typedef charT                     char_type;
        typedef typename traits::int_type int_type;
        typedef typename traits::pos_type pos_type;
        typedef typename traits::off_type off_type;
        typedef traits                    traits_type;
        // constructors:
        explicit basic_istringstream(ios_base::openmode which = ios_base::in);
        explicit basic_istringstream(
            const basic_string<charT, traits, Allocator>& str,
            ios_base::openmode which = ios_base::in);
        // members:
        basic_stringbuf<charT, traits, Allocator>* rdbuf() const;
        basic_string<charT, traits, Allocator> str() const;
        void str(const basic_string<charT, traits, Allocator>& s);
    private:
    };

    typedef basic_istringstream<char>    istringstream;
    typedef basic_istringstream<wchar_t> wistringstream;

    template <class charT, class traits, class Allocator>
    class basic_ostringstream : public basic_ostream<charT, traits> {
    public:
        typedef charT                     char_type;
        typedef typename traits::int_type int_type;
        typedef typename traits::pos_type pos_type;
        typedef typename traits::off_type off_type;
        // constructors/destructor:
        explicit basic_ostringstream(ios_base::openmode which 
                                     = ios_base::out);
        explicit basic_ostringstream(
            const basic_string<charT, traits, Allocator>& str,
            ios_base::openmode which = ios_base::out);
        // members:
        basic_stringbuf<charT, traits, Allocator>* rdbuf() const;
        basic_string<charT, traits, Allocator> str() const;
        void str(const basic_string<charT, traits, Allocator>& s);
    private:
    };

    typedef basic_ostringstream<char>    ostringstream;
    typedef basic_ostringstream<wchar_t> wostringstream;

    template <class charT, class traits, class Allocator>
    class basic_stringstream : public basic_iostream<charT, traits> {
    public:
        typedef charT                     char_type;
        typedef typename traits::int_type int_type;
        typedef typename traits::pos_type pos_type;
        typedef typename traits::off_type off_type;
        // constructors/destructors:
        explicit basic_stringstream(
            ios_base::openmode which = ios_base::out | ios_base::in);
        explicit basic_stringstream(
            const basic_string<charT, traits, Allocator>& str,
            ios_base::openmode which = ios_base::out | ios_base::in);
        // members:
        basic_stringbuf<charT, traits, Allocator>* rdbuf() const;
        basic_string<charT, traits, Allocator> str() const;
        void str(const basic_string<charT, traits, Allocator>& str);
    private:
    };

    typedef basic_stringstream<char>    stringstream;
    typedef basic_stringstream<wchar_t> wstringstream;

}       /* namespace std */

#endif /* _SSTREAM */
