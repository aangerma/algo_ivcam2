/*****************************************************************************

                                    memory

    C++ compatible header file for synthesis.

    $Id: memory,v 1.2 2006-03-20 22:30:57 deg Exp $

*****************************************************************************/

#ifndef _MEMORY
#define _MEMORY

#include <allocator>
#include <cstddef>      // for ptrdiff_t
#include <iterator>
#include <utility>      // for pair

namespace std {

    // raw storage iterator:
    template <class OutputIterator, class T> class raw_storage_iterator :
        public iterator<output_iterator_tag, void, void, void, void> {
    public:
        explicit raw_storage_iterator(OutputIterator x);

        raw_storage_iterator<OutputIterator, T>& operator*();
        raw_storage_iterator<OutputIterator, T>& operator=(const T& element);
        raw_storage_iterator<OutputIterator, T>& operator++();
        raw_storage_iterator<OutputIterator, T>  operator++(int);

    };  /* class raw_storage_iterator */

    // temporary buffers:
    template <class T>
        pair<T*, ptrdiff_t> get_temporary_buffer(ptrdiff_t n);
    template <class T>
        void return_temporary_buffer(T* p);

    // specialized algorithms:
    template <class InputIterator, class ForwardIterator>
        ForwardIterator uninitialized_copy(InputIterator first,
                                           InputIterator last,
                                           ForwardIterator result);
    template <class ForwardIterator, class T>
        void uninitialized_fill(ForwardIterator first, 
                                ForwardIterator last,
                                const T& x);
    template <class ForwardIterator, class Size, class T>
        void uninitialized_fill_n(ForwardIterator first, Size n, const T& x);

    // pointers:
    template<class X> class auto_ptr {
        template <class Y> struct auto_ptr_ref {};
    public:
        typedef X element_type;

        // construct/copy/destroy:
        explicit auto_ptr(X* p = 0) throw();
        auto_ptr(auto_ptr&) throw();
        template <class Y> auto_ptr(auto_ptr<Y>&) throw();
        auto_ptr& operator=(auto_ptr&) throw();
        template <class Y> auto_ptr& operator=(auto_ptr<Y>&) throw();
        ~auto_ptr() throw();

        // members:
        X& operator*() const throw();
        X* operator->() const throw();
        X* get() const throw();
        X* release() throw();
        void reset(X* p = 0) throw();

        // conversions:
        auto_ptr(auto_ptr_ref<X>) throw();
        template<class Y> operator auto_ptr_ref<Y>() throw();
        template<class Y> operator auto_ptr<Y>() throw();

    };  /* class auto_ptr */

}   /* namespace std */

#endif  /* _MEMORY */
