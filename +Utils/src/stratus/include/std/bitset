/*****************************************************************************

                                    bitset

    C++ compatible header file for synthesis.

    $Id: bitset,v 1.1 2005-06-15 22:55:13 deg Exp $

*****************************************************************************/

#ifndef _BITSET
#define _BITSET

#include <char_traits>
#include <cstddef>      // for size_t
#include <istream>
#include <ostream>
#include <string>
#include <stdexcept>    // for invalid_argument, out_of_range, overflow_error

namespace std {
    template <size_t N> class bitset {
    public:
        // bit reference:
        class reference {
            friend class bitset;
            reference();
        public:
            ~reference();
            reference& operator=(bool x);           // for b[i] = x;
            reference& operator=(const reference&); // for b[i] = b[j];
            bool operator~() const;                 // flips the bit
            operator bool() const;                  // for x = b[i];
            reference& flip();                      // for b[i].flip();
        };  /* class reference */
    
        // constructors:
        bitset();
        bitset(unsigned long val);
        template <class charT, class traits, class Allocator>
            explicit bitset(const basic_string<charT, traits, Allocator>& str,
                            typename basic_string<charT, traits, Allocator>::
                                size_type pos = 0,
                            typename basic_string<charT, traits, Allocator>::
                                size_type n = 
                                basic_string<charT, traits, Allocator>::npos);
        // bitset operations:
        bitset<N>& operator&=(const bitset<N>& rhs);
        bitset<N>& operator|=(const bitset<N>& rhs);
        bitset<N>& operator^=(const bitset<N>& rhs);
        bitset<N>& operator<<=(size_t pos);
        bitset<N>& operator>>=(size_t pos);
        bitset<N>& set();
        bitset<N>& set(size_t pos, int val = true);
        bitset<N>& reset();
        bitset<N>& reset(size_t pos);
        bitset<N>  operator~()const;
        bitset<N>& flip();
        bitset<N>& flip(size_t pos);

        // element access:
        reference operator[](size_t pos);       // for b[i];
        unsigned long to_ulong() const;
        template <class charT, class traits, class Allocator> 
            basic_string<charT, traits, Allocator> to_string() const;
        size_t count() const;
        size_t size() const;
        bool operator==(const bitset<N>& rhs) const;
        bool operator!=(const bitset<N>& rhs) const;
        bool test(size_t pos) const;
        bool any() const;
        bool none() const;
        bitset<N> operator<<(size_t pos) const;
        bitset<N> operator>>(size_t pos) const;

    };  /* class bitset */

    // bitset operations:
    template <size_t N>
        bitset<N> operator&(const bitset<N>&, const bitset<N>&);
    template <size_t N>
        bitset<N> operator|(const bitset<N>&, const bitset<N>&);
    template <size_t N>
        bitset<N> operator^(const bitset<N>&, const bitset<N>&);
    template <class charT, class traits, size_t N>
        basic_istream<charT, traits>&
            operator>>(basic_istream<charT, traits>& is, bitset<N>& x);
    template <class charT, class traits, size_t N>
        basic_ostream<charT, traits>&
            operator<<(basic_ostream<charT, traits>& os, bitset<N>& x);

}   /* namespace std */

#endif  /* _BITSET */
