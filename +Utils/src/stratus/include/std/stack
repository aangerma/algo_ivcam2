/*****************************************************************************

                                    stack

    C++ compatible header file for synthesis.

    $Id: stack,v 1.1 2005-06-15 22:55:13 deg Exp $

*****************************************************************************/

#ifndef _STACK
#define _STACK

#include <deque>

namespace std {

    template <class T, class Container = deque<T> > class stack {
    public:
        typedef typename Container::value_type      value_type;
        typedef typename Container::size_type       size_type;
        typedef          Container                  container_type;
    protected:
        Container c;

    public:
        explicit stack(const Container& = Container());

        bool                empty() const       { return c.empty(); }
        size_type           size() const        { return c.size(); }
        value_type&         top()               { return c.back(); }
        const value_type&   top() const         { return c.back(); }
        void push(const value_type& x)          { c.push_back(x); }
        void pop()                              { c.pop_back(); }

    };  /* class stack */

    template <class T, class Container>
        bool operator==(const stack<T, Container>& x,
                        const stack<T, Container>& y);
    template <class T, class Container>
        bool operator< (const stack<T, Container>& x,
                        const stack<T, Container>& y);
    template <class T, class Container>
        bool operator!=(const stack<T, Container>& x,
                        const stack<T, Container>& y);
    template <class T, class Container>
        bool operator> (const stack<T, Container>& x,
                        const stack<T, Container>& y);
    template <class T, class Container>
        bool operator>=(const stack<T, Container>& x,
                        const stack<T, Container>& y);
    template <class T, class Container>
        bool operator<=(const stack<T, Container>& x,
                        const stack<T, Container>& y);

}   /* namespace std */

#endif  /* _STACK */
