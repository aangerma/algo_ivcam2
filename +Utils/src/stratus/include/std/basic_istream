/*****************************************************************************

                                basic_istream

    C++ compatible header file for use in compiling SystemC.

    $Id: basic_istream,v 1.3 2005-06-15 22:55:13 deg Exp $

*****************************************************************************/

#ifndef _BASIC_ISTREAM
#define _BASIC_ISTREAM

#include <basic_ios>    /* for basic_ios */
#include <char_traits>  /* for char_traits */
#include <iosfwd>       /* for default template arguments */

namespace std {

    template <class charT, class traits> 
    class basic_istream : virtual public basic_ios<charT,traits> { 
    public: 

        // Types (inherited from basic_ios (27.4.4)): 
        typedef charT char_type; 
        typedef typename traits::int_type int_type; 
        typedef typename traits::pos_type pos_type; 
        typedef typename traits::off_type off_type; 
        typedef traits traits_type; 

        // 27.6.1.1.1 Constructor/destructor: 
        explicit basic_istream(basic_streambuf<charT,traits>* sb); 
        virtual ~basic_istream(); 

        // 27.6.1.1.2 Prefix/suffix: 
        class sentry; 

        // 27.6.1.2 Formatted input: 
        basic_istream<charT,traits>& operator>> 
            (basic_istream<charT,traits>& (*pf)(basic_istream<charT,traits>&));
        basic_istream<charT,traits>& operator>> 
            (basic_ios<charT,traits>& (* pf)(basic_ios<charT,traits>&)); 
        basic_istream<charT,traits>& operator>> 
            (ios_base& (* pf)(ios_base&)); 

        basic_istream<charT,traits>& operator>>(bool& n); 
        basic_istream<charT,traits>& operator>>(short& n); 
        basic_istream<charT,traits>& operator>>(unsigned short& n); 
        basic_istream<charT,traits>& operator>>(int& n); 
        basic_istream<charT,traits>& operator>>(unsigned int& n); 
        basic_istream<charT,traits>& operator>>(long& n); 
        basic_istream<charT,traits>& operator>>(long long& n); 
        basic_istream<charT,traits>& operator>>(unsigned long& n); 
        basic_istream<charT,traits>& operator>>(unsigned long long& n); 
        basic_istream<charT,traits>& operator>>(float& f); 
        basic_istream<charT,traits>& operator>>(double& f); 
        basic_istream<charT,traits>& operator>>(long double& f); 
        basic_istream<charT,traits>& operator>>(void*& p); 
        basic_istream<charT,traits>& operator>> 
            (basic_streambuf<char_type,traits>* sb); 

        // 27.6.1.3 Unformatted input: 
        streamsize gcount() const;
        int_type get(); 
        basic_istream<charT,traits>& get(char_type& c); 
        basic_istream<charT,traits>& get(char_type* s, streamsize n); 
        basic_istream<charT,traits>& get(char_type* s, streamsize n, 
                                         char_type delim); 
        basic_istream<charT,traits>& get(basic_streambuf<char_type,traits>& sb);
        basic_istream<charT,traits>& get(basic_streambuf<char_type,traits>& sb,
                                         char_type delim); 
        basic_istream<charT,traits>& getline(char_type* s, streamsize n); 
        basic_istream<charT,traits>& getline(char_type* s, streamsize n, 
                                             char_type delim);
        basic_istream<charT,traits>& ignore (streamsize n = 1, 
                                             int_type delim = traits::eof()); 
        int_type peek(); 
        basic_istream<charT,traits>& read (char_type* s, streamsize n); 
        streamsize readsome(char_type* s, streamsize n); 
        basic_istream<charT,traits>& putback(char_type c); 
        basic_istream<charT,traits>& unget(); 
        int sync(); 
        pos_type tellg(); 
        basic_istream<charT,traits>& seekg(pos_type); 
        basic_istream<charT,traits>& seekg(off_type, ios_base::seekdir); 
    };

}   /* namespace std */

#endif /* _BASIC_ISTREAM */
