/*****************************************************************************

                                iterator_traits

    C++ compatible header file for synthesis.

    $Id: iterator_traits,v 1.1 2005-06-15 22:55:13 deg Exp $

*****************************************************************************/

#ifndef _ITERATOR_TRAITS
#define _ITERATOR_TRAITS

#include <cstddef>      // for ptrdiff_t

namespace std {

    // standard iterator tags:
    struct input_iterator_tag {};
    struct output_iterator_tag {};
    struct forward_iterator_tag: public input_iterator_tag {};
    struct bidirectional_iterator_tag: public forward_iterator_tag {};
    struct random_access_iterator_tag: public bidirectional_iterator_tag {};

    template<class Iterator> struct iterator_traits {
        typedef typename Iterator::difference_type difference_type;
        typedef typename Iterator::value_type value_type;
        typedef typename Iterator::pointer pointer;
        typedef typename Iterator::reference reference;
        typedef typename Iterator::iterator_category iterator_category;
    };  /* struct iterator_traits */

    // specialized for pointers:
    template<class T> struct iterator_traits<T*> {
        typedef ptrdiff_t difference_type;
        typedef T value_type;
        typedef T* pointer;
        typedef T& reference;
        typedef random_access_iterator_tag iterator_category;
    };  /* struct iterator_traits<T*> */

    // specialized for pointers to const:
    template<class T> struct iterator_traits<const T*> {
        typedef ptrdiff_t difference_type;
        typedef T value_type;
        typedef const T* pointer;
        typedef const T& reference;
        typedef random_access_iterator_tag iterator_category;
    };  /* struct iterator_traits<const T*> */

}   /* namespace std */

#endif  /* _ITERATOR_TRAITS */
