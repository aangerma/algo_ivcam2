function ivlpifns = scopeFolder2ivlpi(baseDir,tblXY,force)
if(~exist('force','var'))
    force = false;
end

resI=1; %resolution multiplayer

rmConfigfn = [baseDir '\Config.csv'];
rm = RegistersManager();
if(exist(rmConfigfn,'file'))
    rm.setRegs(rmConfigfn);
end
regs = rm.getRegs();



rawfns = [dirFiles(baseDir,'*.bin');dirFiles(baseDir,'*.h5')];

if(isempty(rawfns))
    error('No input files in directory %s',baseDir);
end


% % 
% % %%%%%%%% calibration %%%%%%%%%%%%%
% % calibratedFn = fullfile(baseDir,'calibrated');
% % if(~exist(calibratedFn,'file'))
% %     %find good candidate for clibration
% %     ind=cellfun(@(x) ~isempty(strfind(x,'calib')),rawfns);
% %     if(sum(ind) ~= 1)
% %         error('could not find file to calibrate from. need a scope filename with CALIB in it');
% %     end
% %     [~,calibFn] = fileparts(rawfns{ind});
% %     
% %     %get GT distance
% %     gtDistnaceMM = regexp(calibFn,'(?<d>[\d]+)','names');
% %     gtDistnaceMM = str2double(gtDistnaceMM(1).d);
% %     gtOffsetNsec = Utils.rmm2dtnsec(gtDistnaceMM);
% %     if(isnan(gtOffsetNsec))
% %         error('Bad file name');
% %     end
% %     fprintf('Calibrating(using %s)\n',rawfns{ind});
% %     %calibrate
% %     [data,err] = io.POC.readScopeData(rawfns{ind},regs);
% %     [calibData,img4save] = Calibration.runPOCcalib(data,  regs, tblXY,gtOffsetNsec);
% %     %save
% %     rm.setRegs(fieldnames(calibData),struct2cell(calibData));
% %     rm.writeUpdated(rmConfigfn);
% %     
% %     fn = fopen([baseDir '\calibrated'],'wb');
% %     fclose(fn);
% %     %imwrite(uint8(img4save),fullfile(baseDir, [calibFn '_calib.png']),'Alpha', double(~isnan(img4save)));
% % end
% % 
% % tblXY = circshift(tblXY,[-regs.poc.msyncDelayFast 0]);
% % 
% % 

%%  all .h5 in dir -> ivlpi
for i=1:length(rawfns)
    [~,fn]=fileparts(rawfns{i});
    
    fileIVL = fullfile(baseDir, [fn '.ivlpi']);
    if(~force && exist(fileIVL,'file'))
        continue;
    end
    fprintf('%s: Generating IVLPI...',fn);
    [data,err] = io.POC.readScopeData(rawfns{i},regs);
    xyT = 64/double(regs.GNRL.sampleRate);
    ivlpiStruct=io.POC.scopeData2ivlpi(data,tblXY,xyT,resI);
    
    if(~isempty(err))
        fprintf('%s\n',err);
    else
        fprintf('Done\n');
    end
    
    if(~isempty(ivlpiStruct))
        io.writeIVLpi(fileIVL, ivlpiStruct.fastCh, ivlpiStruct.slowCh, ivlpiStruct.xy, ivlpiStruct.properties);
    end
    
end




ivlpifns = dirFiles(baseDir,'*.ivlpi');
end